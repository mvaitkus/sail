{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["persistAtom","recoilPersist","key","windSpeedUnitState","atom","default","effects_UNSTABLE","WindSpeedUnitSelector","useRecoilState","setWindSpeedUnit","onClick","weightState","windRangeKts","Array","from","_","i","windRangeMps","WindToSail","windSpeedUnit","useRecoilValue","weight","sails","windRange","unit","WindRangeToSails","props","map","windSpeed","toFixed","sailSize","windStrengthKnots","windStrengthMps","WindAndSailSize","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAe,MAA0B,iC,kCCmBjCA,EAAgBC,wBAAc,CAAEC,IAAK,WAArCF,YAEFG,EAAqBC,eAAK,CAC9BF,IAAK,gBACLG,QAAS,MACTC,iBAAkB,CAACN,KAGfO,EAAkC,WAAO,IAAD,EACfC,yBAAeL,GAAnCM,EADmC,oBAE5C,OACE,8BACE,gCACE,wBAAQC,QAAS,kBAAMD,EAAiB,QAAxC,iBACA,wBAAQC,QAAS,kBAAMD,EAAiB,QAAxC,uBAMFE,EAAcP,eAAK,CACvBF,IAAK,SACLG,QAAS,GACTC,iBAAkB,CAACN,KAGfY,EAAeC,MAAMC,KAAK,IAAID,MAAM,KAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAI,MACvDC,EAAeJ,MAAMC,KAAK,IAAID,MAAM,KAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAI,EAAI,KAQ3DE,EAAuB,WAC3B,IAAMC,EAAgBC,yBAAejB,GAC/BkB,EAASD,yBAAeT,GAExBW,EACJ,cAAC,EAAD,CACEC,UAA6B,QAAlBJ,EAA0BP,EAAeK,EACpDI,OAAQA,EACRG,KAAML,IAGV,OACE,gCACE,8BACE,cAAC,EAAD,MAEDG,MAWDG,EAAoD,SAAAC,GACxD,GAAmB,QAAfA,EAAMF,KAAgB,CACxB,IAAMF,EAAQI,EAAMH,UAAUI,KAAI,SAAAC,GAAS,OACzC,cAAC,EAAD,CAEEA,UAAWA,EAAUC,QAAQ,GAC7BL,KAAK,MACLM,UAxCoBT,EAwCSK,EAAML,OAxCCU,EAwCOH,EAvChD,KAAOP,EAAUU,GAuC0CF,QAAQ,IAHzDD,GArCc,IAACP,EAAgBU,KA2CxC,OAAO,8BAAMT,IACR,GAAmB,QAAfI,EAAMF,KAAgB,CAC/B,IAAMF,EAAQI,EAAMH,UAAUI,KAAI,SAAAC,GAAS,OACzC,cAAC,EAAD,CAEEA,UAAWA,EAAUC,QAAQ,GAC7BL,KAAK,OACLM,UA/CoBT,EA+CSK,EAAML,OA/CCW,EA+COJ,EA9ChD,MAASP,EAAUW,GA8CwCH,QAAQ,IAHzDD,GA5Cc,IAACP,EAAgBW,KAkDxC,OAAO,8BAAMV,IAEb,OAAO,uCAULW,EAAkD,SAAAP,GACtD,OACE,gCACGA,EAAME,UADT,IACqBF,EAAMF,KAD3B,MACoCE,EAAMI,SAD1C,UAMWI,EAnHf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,cAAC,aAAD,UACE,cAAC,EAAD,YCEKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64e5b3f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { atom, RecoilRoot, useRecoilState, useRecoilValue } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <RecoilRoot>\n          <WindToSail />\n        </RecoilRoot>\n      </header>\n    </div>\n  );\n}\n\nconst { persistAtom } = recoilPersist({ key: \"config\" });\n\nconst windSpeedUnitState = atom({\n  key: \"windSpeedUnit\",\n  default: \"kts\",\n  effects_UNSTABLE: [persistAtom]\n});\n\nconst WindSpeedUnitSelector: React.FC = () => {\n  const [, setWindSpeedUnit] = useRecoilState(windSpeedUnitState);\n  return (\n    <div>\n      <div>\n        <button onClick={() => setWindSpeedUnit(\"kts\")}>kts</button>\n        <button onClick={() => setWindSpeedUnit(\"mps\")}>m/s</button>\n      </div>\n    </div>\n  );\n};\n\nconst weightState = atom({\n  key: \"weight\",\n  default: 82,\n  effects_UNSTABLE: [persistAtom]\n});\n\nconst windRangeKts = Array.from(new Array(27), (_, i) => i + 12);\nconst windRangeMps = Array.from(new Array(27), (_, i) => i / 2 + 6);\n\nconst sailSizeForWindKts = (weight: number, windStrengthKnots: number) =>\n  (1.34 * weight) / windStrengthKnots;\n\nconst sailSizeForWindMps = (weight: number, windStrengthMps: number) =>\n  (0.6893 * weight) / windStrengthMps;\n\nconst WindToSail: React.FC = () => {\n  const windSpeedUnit = useRecoilValue(windSpeedUnitState);\n  const weight = useRecoilValue(weightState);\n\n  const sails = (\n    <WindRangeToSails\n      windRange={windSpeedUnit === \"kts\" ? windRangeKts : windRangeMps}\n      weight={weight}\n      unit={windSpeedUnit}\n    />\n  );\n  return (\n    <div>\n      <div>\n        <WindSpeedUnitSelector />\n      </div>\n      {sails}\n    </div>\n  );\n};\n\ninterface WindRangeToSailsProps {\n  windRange: Array<number>;\n  weight: number;\n  unit: string;\n}\n\nconst WindRangeToSails: React.FC<WindRangeToSailsProps> = props => {\n  if (props.unit === \"kts\") {\n    const sails = props.windRange.map(windSpeed => (\n      <WindAndSailSize\n        key={windSpeed}\n        windSpeed={windSpeed.toFixed(0)}\n        unit=\"kts\"\n        sailSize={sailSizeForWindKts(props.weight, windSpeed).toFixed(1)}\n      />\n    ));\n    return <div>{sails}</div>;\n  } else if (props.unit === \"mps\") {\n    const sails = props.windRange.map(windSpeed => (\n      <WindAndSailSize\n        key={windSpeed}\n        windSpeed={windSpeed.toFixed(1)}\n        unit=\"m\\s\"\n        sailSize={sailSizeForWindMps(props.weight, windSpeed).toFixed(1)}\n      />\n    ));\n    return <div>{sails}</div>;\n  } else {\n    return <div>TBD</div>;\n  }\n};\n\ninterface WindAndSailSizeProps {\n  windSpeed: string;\n  sailSize: string;\n  unit: string;\n}\n\nconst WindAndSailSize: React.FC<WindAndSailSizeProps> = props => {\n  return (\n    <div>\n      {props.windSpeed} {props.unit} = {props.sailSize} m2\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}